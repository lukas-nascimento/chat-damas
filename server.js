// ============================================
// TRECHO CORRIGIDO DO server.js
// Substitua a partir da linha 217 (ws.on('message'))
// ============================================

ws.on('message', (msg) => {
  try {
    const message = JSON.parse(msg);
    const user = users.get(ws);
    
    console.log(`üì• Mensagem recebida - Tipo: ${message.type}, User: ${user?.name || 'DESCONHECIDO'}`);

    if (!user) {
      console.error('‚ùå ERRO: Usu√°rio n√£o encontrado no Map!');
      console.error('‚ùå WebSocket registrado?', users.has(ws));
      console.error('‚ùå Total de usu√°rios:', users.size);
      return;
    }

    // ‚úÖ SET_NAME COM VALIDA√á√ÉO RIGOROSA
    if (message.type === 'set_name') {
      console.log('üìù set_name recebido:', message.data, 'Tipo:', typeof message.data);
      
      // ‚úÖ VALIDA√á√ÉO CR√çTICA DO TIPO
      if (typeof message.data !== 'string') {
        console.error('‚ùå ERRO: Nome n√£o √© string!', typeof message.data, message.data);
        ws.send(JSON.stringify({
          type: 'error',
          data: { message: 'Nome inv√°lido: deve ser uma string' }
        }));
        return;
      }

      const newName = message.data.trim();
      
      // ‚úÖ VALIDA√á√ÉO DE TAMANHO
      if (!newName) {
        console.error('‚ùå ERRO: Nome vazio ap√≥s trim');
        ws.send(JSON.stringify({
          type: 'error',
          data: { message: 'Nome n√£o pode estar vazio' }
        }));
        return;
      }

      if (newName.length < 3 || newName.length > 20) {
        console.error('‚ùå ERRO: Nome com tamanho inv√°lido:', newName.length);
        ws.send(JSON.stringify({
          type: 'error',
          data: { message: 'Nome deve ter entre 3 e 20 caracteres' }
        }));
        return;
      }

      console.log(`‚úèÔ∏è Alterando nome: ${user.name} ‚Üí ${newName}`);
      user.name = newName;
      users.set(ws, user);
      updateOnlineCount();
      
      console.log('‚úÖ Nome alterado com sucesso!');
    }

    // ‚úÖ MENSAGEM DE TEXTO COM VALIDA√á√ÉO
    else if (message.type === 'message') {
      console.log(`üí¨ Processando mensagem de texto: "${message.data}"`);
      
      // ‚úÖ VALIDA√á√ÉO DO TIPO
      if (typeof message.data !== 'string') {
        console.error('‚ùå Mensagem n√£o √© string!', typeof message.data);
        ws.send(JSON.stringify({
          type: 'error',
          data: { message: 'Mensagem inv√°lida' }
        }));
        return;
      }
      
      const cleanMessage = message.data.trim();
      
      if (!cleanMessage) {
        console.log('‚ùå Mensagem vazia ap√≥s trim');
        return;
      }
      
      if (!validateMessage(cleanMessage, ws, user)) {
        console.log('‚ùå Mensagem bloqueada pela valida√ß√£o');
        return;
      }

      console.log(`üì§ Broadcasting mensagem de ${user.name}`);
      broadcastEvent('message', {
        userId: user.id,
        userName: user.name,
        content: cleanMessage,
        timestamp: Date.now()
      });
    }

    // ‚úÖ √ÅUDIO
    else if (message.type === 'audio_message') {
      console.log(`üé§ √Åudio recebido de ${user.name}`);
      
      if (!message.data || !message.data.audio) {
        console.error('‚ùå Dados de √°udio inv√°lidos');
        return;
      }
      
      broadcastEvent('audio_message', {
        userId: user.id,
        userName: user.name,
        content: message.data.audio,
        timestamp: Date.now()
      });
    }

    // ‚úÖ IMAGEM
    else if (message.type === 'image_message') {
      console.log(`üñºÔ∏è Imagem recebida de ${user.name}`);
      
      if (!message.data || !message.data.image) {
        console.error('‚ùå Dados de imagem inv√°lidos');
        return;
      }
      
      broadcastEvent('image_message', {
        userId: user.id,
        userName: user.name,
        content: message.data.image,
        fileName: message.data.fileName || 'imagem.png',
        timestamp: Date.now()
      });
    }

    // ‚úÖ V√çDEO
    else if (message.type === 'video_message') {
      console.log(`üé• V√≠deo recebido de ${user.name}`);
      
      if (!message.data || !message.data.video) {
        console.error('‚ùå Dados de v√≠deo inv√°lidos');
        ws.send(JSON.stringify({
          type: 'message_blocked',
          data: { reason: 'Dados de v√≠deo inv√°lidos' }
        }));
        return;
      }
      
      // Verifica tamanho
      const videoSize = message.data.fileSize || 0;
      const maxSize = 500 * 1024 * 1024; // 500MB
      
      if (videoSize > maxSize) {
        console.log(`‚ùå V√≠deo muito grande: ${(videoSize / 1024 / 1024).toFixed(2)}MB`);
        ws.send(JSON.stringify({
          type: 'message_blocked',
          data: { reason: 'V√≠deo muito grande (m√°ximo 500MB)' }
        }));
        return;
      }
      
      console.log(`üì§ Broadcasting v√≠deo de ${user.name} (${(videoSize / 1024 / 1024).toFixed(2)}MB)`);
      
      broadcastEvent('video_message', {
        userId: user.id,
        userName: user.name,
        content: message.data.video,
        fileName: message.data.fileName || 'video.mp4',
        timestamp: Date.now()
      });
    }

    // ‚úÖ STICKER
    else if (message.type === 'sticker_message') {
      console.log(`üòä Sticker enviado por ${user.name}`);
      
      if (!message.data || !message.data.sticker) {
        console.error('‚ùå Dados de sticker inv√°lidos');
        return;
      }
      
      broadcastEvent('sticker_message', {
        userId: user.id,
        userName: user.name,
        content: message.data.sticker,
        timestamp: Date.now()
      });
    }

    // ‚úÖ TYPING
    else if (message.type === 'typing_start' || message.type === 'typing_stop') {
      console.log(`‚å®Ô∏è ${user.name} ${message.type === 'typing_start' ? 'come√ßou' : 'parou'} de digitar`);
      broadcastEvent('user_typing', {
        userId: user.id,
        userName: user.name,
        isTyping: message.type === 'typing_start'
      });
    }

    else {
      console.log(`‚ö†Ô∏è Tipo de mensagem desconhecido: ${message.type}`);
    }

  } catch (err) {
    console.error('‚ùå Erro ao processar mensagem:', err.message);
    console.error('‚ùå Stack:', err.stack);
    console.error('‚ùå Mensagem original:', msg.toString());
  }
});